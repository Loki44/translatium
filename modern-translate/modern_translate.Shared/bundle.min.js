(function () {
    "use strict";

    var utils = WinJS.Utilities;
    var nav = WinJS.Navigation;
    var app = WinJS.Application;
    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    WinJS.Namespace.define("Custom.Control", {
        Theme_X: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                this.name = this.element.getAttribute("aria-name");
                this.hex = this.element.getAttribute("aria-hex");
                this.thex = this.element.getAttribute("aria-thex");

                this.element.className = "color-box left";
                this.element.style.backgroundColor = this.hex;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                if (this.name == localSettings.values["x-theme"]) {
                    var active = document.createElement("i");
                    active.className = "md md-done";
                    active.style.color = this.thex;
                    this.element.appendChild(active);
                }

                var sp = document.createElement("span");
                sp.innerText = this.name;
                sp.style.color = this.thex;
                this.element.appendChild(sp);

                this.element.onclick = this._changeThemeX.bind(this);

            }, {
                _changeThemeX: function () {
                    if (!Custom.Utils.isPremium()) {
                        nav.navigate("/pages/premium/premium.html");
                        return;
                    }
                    if (this.name != localSettings.values["x-theme"]) {

                        var newname = this.name;
                        var oldname = localSettings.values["x-theme"];

                        localSettings.values["x-theme"] = newname;
                        Custom.UI.applyTheme();

                        Custom.Data.themeXList.every(function (x, i) {
                            if (x.name == oldname) {
                                var tmp = Custom.Data.themeXList.getAt(i);
                                Custom.Data.themeXList.splice(i, 1, tmp);
                                return false;
                            }
                            return true;
                        });

                        Custom.Data.themeXList.every(function (x, i) {
                            if (x.name == newname) {
                                var tmp = Custom.Data.themeXList.getAt(i);
                                Custom.Data.themeXList.splice(i, 1, tmp);
                                return false;
                            }
                            return true;
                        });
                    }
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Theme_Y: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                this.name = this.element.getAttribute("aria-name");
                this.hex = this.element.getAttribute("aria-hex");

                this.element.className = "color-box left";
                this.element.style.backgroundColor = this.hex;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                if (this.name == localSettings.values["y-theme"]) {
                    var active = document.createElement("i");
                    active.className = "md md-done";
                    this.element.appendChild(active);
                }

                this.element.onclick = this._changeThemeY.bind(this);

            }, {
                _changeThemeY: function () {
                    if (!Custom.Utils.isPremium()) {
                        nav.navigate("/pages/premium/premium.html");
                        return;
                    }
                    if (this.name != localSettings.values["y-theme"]) {

                        var newname = this.name;
                        var oldname = localSettings.values["y-theme"];

                        localSettings.values["y-theme"] = newname;
                        Custom.UI.applyTheme();
                        Custom.UI.applyStatusbar();

                        Custom.Data.themeYList.every(function (x, i) {
                            if (x.name == oldname) {
                                var tmp = Custom.Data.themeYList.getAt(i);
                                Custom.Data.themeYList.splice(i, 1, tmp);
                                return false;
                            }
                            return true;
                        });

                        Custom.Data.themeYList.forEach(function (x, i) {
                            if (x.name == newname) {
                                var tmp = Custom.Data.themeYList.getAt(i);
                                Custom.Data.themeYList.splice(i, 1, tmp);
                                return false;
                            }
                            return true;
                        });
                    }
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Listen: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "md-volume-up");
                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.player = document.createElement("audio");

                this.element.onclick = this._handleClick.bind(this);

            }, {
                _playSound: function () {
                    var that = this;
                    return new WinJS.Promise(function (complete, error, progress) {
                        that.player.play();
                        that.player.onended = function () {
                            complete();
                        };
                    });
                },

                _loadPart: function (lang, text, idx, total) {
                    var that = this;
                    return WinJS.Promise.as().then(function () {
                        Custom.Utils.showNotif(WinJS.Resources.getString("loading_sound").value);
                        var url = encodeURI("https://translate.google.com/translate_tts?ie=UTF-8&tl=" + lang + "&q=" + text + "&textlen=" + text.length + "&idx=" + idx + " &total=" + total +"&client=t&prev=input&tk=0");
                        return WinJS.xhr({ url: url, responseType: "blob" }).then(function (response) {
                            return response.response;
                        }, function () {
                            var allVoices = Windows.Media.SpeechSynthesis.SpeechSynthesizer.allVoices;
                            var i = -1;
                            for (var j = 0; j < allVoices.length; j++) {
                                if (allVoices[j].language.substr(0, 2) == lang) {
                                    i = j;
                                    break;
                                }
                            }
                            if (i > -1) {
                                var synth = new Windows.Media.SpeechSynthesis.SpeechSynthesizer();
                                synth.voice = allVoices[i];
                                return synth.synthesizeTextToStreamAsync(text).then(function (markersStream) {
                                    var blob = MSApp.createBlobFromRandomAccessStream(markersStream.ContentType, markersStream);
                                    return blob;
                                });
                            }
                        }).then(function (blob) {
                            if (blob) {
                                var url = URL.createObjectURL(blob, { oneTimeOnly: true });
                                that.player.src = url;
                                return that._playSound().then(function () {
                                    return true;
                                });
                            }
                            throw "fail to get blob";
                        }).then(function () {
                            return true;
                        });
                    });
                },

                _splitToParts: function (lang, text) {
                    var that = this;
                    return WinJS.Promise.as().then(function () {
                        var strArr = []
                        while (text.length > 0) {
                            if (text.length > 100) {
                                var tmp = text.substr(0, 99);
                                var last = tmp.lastIndexOf(" ");
                                if (last == -1) last = tmp.length - 1;
                                var stext = tmp.substr(0, last);
                            }
                            else {
                                var stext = text;
                            }
                            strArr.push(stext);
                            text = text.substr(stext.length);
                        }
                        return strArr;
                    }).then(function (strArr) {
                        var i = 0;
                        var cF = function() {
                            return that._loadPart(lang, strArr[i], i, strArr.length).then(function (ok) {
                                if ((ok == true) && (i < strArr.length - 1)) {
                                    i++;
                                    return cF();
                                }
                            });
                        }

                        return cF();
                    });
                },

                _handleClick: function () {
                    var that = this;
                    var element = this.element;
                    var lang = this.lang;
                    var text = this.text;
                    if (text.length == 0) return;


                    if (utils.hasClass(element, "md-volume-up")) {
                        utils.removeClass(element, "md-volume-up");
                        utils.addClass(element, "md-stop");
                        if (window.soundPromise)
                            window.soundPromise.cancel();
                        window.soundPromise = this._splitToParts(lang, text)
                            .then(
                                function () {
                                    utils.addClass(element, "md-volume-up");
                                    utils.removeClass(element, "md-stop");
                                    that.player.src = "";
                                    Custom.Utils.hideNotif();
                                },
                                function (err) {
                                    if (err.name != "Canceled")
                                        Custom.Utils.popupNoInternet();
                                    utils.addClass(element, "md-volume-up");
                                    utils.removeClass(element, "md-stop");
                                    that.player.src = "";
                                    Custom.Utils.hideNotif();
                                }
                            );
                    }
                    else {
                        if (window.soundPromise)
                            window.soundPromise.cancel();
                    }
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Suggestion: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._useSuggestion.bind(this);
            },
            {
                suggestedinputText: {
                    get: function() {
                        return this._suggestedinputText;
                    },
                    set: function (value) {
                        this._suggestedinputText = value;
                        this._setup();
                    }
                },

                _setup: function () {
                    if (this.suggestedinputText) {
                        this.element.innerHTML = toStaticHTML(WinJS.Resources.getString("did_you_mean").value
                            .replace("{1}", "<span style='text-decoration: underline;'>" + this.suggestedinputText + "</span>"));
                        this.element.hidden = false;
                        return;
                    }
                    if ((this.suggestedinputLang) && (this.suggestedinputLang != this.inputLang)) {
                        this.element.innerHTML = toStaticHTML(WinJS.Resources.getString("translate_from").value
                            .replace("{1}", "<span style='text-decoration: underline;'>" + WinJS.Resources.getString(this.suggestedinputLang).value + "</span>"));
                        this.element.hidden = false;
                        return;
                    }
                    this.element.hidden = true;
                },

                _useSuggestion: function () {
                    if (this.suggestedinputText) {
                        Custom.Navigation.navigator.pageControl.inputBox.value = this.suggestedinputText;
                        Custom.Navigation.navigator.pageControl.bindingData.inputText = this.suggestedinputText;
                        return;
                    }
                    if (this.suggestedinputLang) {
                        Custom.Navigation.navigator.pageControl.bindingData.inputLang = this.suggestedinputLang;
                        return;
                    }
                },

                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Delete: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._deleteHistory.bind(this);
            },
            {
                _deleteHistory: function (e) {
                    var id = this.id;
                    var statement = "DELETE FROM history WHERE id=" + id;
                    Custom.SQLite.localDatabase.executeAsync(statement).then(function () {
                        Custom.Navigation.navigator.pageControl.bindingData.historyList.every(function (x, i) {
                            if (x.id == id) {
                                Custom.Navigation.navigator.pageControl.bindingData.historyList.splice(i, 1);
                                return false;
                            }
                            return true;
                        });
                        if (Custom.Navigation.navigator.pageControl.bindingData.historyList.length == 0)
                            Custom.Navigation.navigator.pageControl.bindingData.loadmoreHistory();
                    });
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Star_in_History: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._toggleFavorite.bind(this);
            }, {
                id: {
                    get: function () { return this._id; },
                    set: function (value) {
                        this._id = value;
                        if (!value) return;
                        var element = this.element;
                        var statement = "SELECT COUNT(1) FROM favorites WHERE history_id=" + value;
                        Custom.SQLite.localDatabase.executeAsync(statement).then(function (result) {
                            var count = result[0].getFirstValueByName("COUNT(1)");
                            if (count == 0) {
                                utils.removeClass(element, "md-star");
                                utils.addClass(element, "md-star-outline");
                            }
                            else {
                                utils.removeClass(element, "md-star-outline");
                                utils.addClass(element, "md-star");
                            }
                        });
                    }
                },
                _toggleFavorite: function (e) {
                    var element = this.element;
                    var id = this.id;
                    if (utils.hasClass(element, "md-star-outline")) {
                        utils.removeClass(element, "md-star-outline");
                        utils.addClass(element, "md-star");
                        return WinJS.Promise.as()
                            .then(function () {
                                var statement = "SELECT * FROM history WHERE id = " + id + " LIMIT 0,1";
                                return Custom.SQLite.localDatabase.executeAsync(statement);
                            }).then(function (result) {
                                var data = Custom.SQLite.entriestoObj(result[0].entries);
                                data.history_id = data.id;
                                delete data.id;
                                return Custom.SQLite.insertObject(Custom.SQLite.localDatabase, "favorites", data);
                            });
                    }
                    else {
                        utils.addClass(element, "md-star-outline");
                        utils.removeClass(element, "md-star");
                        return WinJS.Promise.as().then(function () {
                            var statement = "DELETE FROM favorites WHERE history_id = " + id;
                            return Custom.SQLite.localDatabase.executeAsync(statement);
                        });
                    }
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Star_in_Favorites: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "md-star");
                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._removeFavorite.bind(this);
            }, {
                _removeFavorite: function (e) {
                    var element = this.element;
                    var id = this.id;
                    utils.addClass(element, "md-star-outline");
                    utils.removeClass(element, "md-star");
                    Custom.Navigation.navigator.pageControl.bindingData.favoriteList.every(function (x, i) {
                        if (x.id == id) {
                            Custom.Navigation.navigator.pageControl.bindingData.favoriteList.splice(i, 1);
                            return false;
                        }
                        return true;
                    });
                    return WinJS.Promise.as().then(function () {
                        var statement = "DELETE FROM favorites WHERE id = " + id;
                        return Custom.SQLite.localDatabase.executeAsync(statement);
                    });
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Copy: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._showOptions.bind(this);
            }, {
                _copyFunc: function (text) {
                    if (Custom.Device.isPhone) {
                        var uri = new Windows.Foundation.Uri("clipboard:Set?Text=" + encodeURIComponent(text));
                        return Windows.System.Launcher.launchUriAsync(uri);
                    }
                    else {
                        var dataPackage = new Windows.ApplicationModel.DataTransfer.DataPackage();
                        dataPackage.setText(text);
                        Windows.ApplicationModel.DataTransfer.Clipboard.setContent(dataPackage);
                    }
                },

                _showOptions: function (e) {
                    var that = this;
                    var menu = new Windows.UI.Popups.PopupMenu();
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("original_text").value, function () { that._copyFunc(that.inputText); }));
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("translated_text").value, function () { that._copyFunc(that.outputText); }));
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("both").value, function () { that._copyFunc(that.inputText + "\r\n" + that.outputText); }));
                    var zoomFactor = document.documentElement.msContentZoomFactor;
                    menu.showAsync({
                        x: (e.pageX - window.pageXOffset) * zoomFactor,
                        y: (e.pageY - window.pageYOffset) * zoomFactor
                    });
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Share: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._showOptions.bind(this);
            }, {
                _shareFunc: function (text) {
                    var dataTransferManager = Windows.ApplicationModel.DataTransfer.DataTransferManager.getForCurrentView();
                    dataTransferManager.ondatarequested = function (e) {
                        var request = e.request;
                        request.data.properties.title = "\0";
                        request.data.properties.description = "\0";
                        request.data.setText(text);
                        dataTransferManager.ondatarequested = null;
                    }
                    Windows.ApplicationModel.DataTransfer.DataTransferManager.showShareUI();
                },

                _showOptions: function (e) {
                    var that = this;
                    var menu = new Windows.UI.Popups.PopupMenu();
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("original_text").value, function () { that._shareFunc(that.inputText); }));
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("translated_text").value, function () { that._shareFunc(that.outputText); }));
                    menu.commands.append(new Windows.UI.Popups.UICommand(WinJS.Resources.getString("both").value, function () { that._shareFunc(that.inputText + "\r\n" + that.outputText); }));
                    var zoomFactor = document.documentElement.msContentZoomFactor;
                    menu.showAsync({
                        x: (e.pageX - window.pageXOffset) * zoomFactor,
                        y: (e.pageY - window.pageYOffset) * zoomFactor
                    });
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Zoom: WinJS.Class.define(
            function (element, options) {
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.element.onclick = this._showZoom.bind(this);
            }, {
                _showZoom: function () {
                    nav.navigate("/pages/p-zoom/p-zoom.html", { text: this.text });
                },
                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.element.onclick = null;
                }
            }
        ),
        Write: WinJS.Class.define(
            function (element, options) {
                var that = this;
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "write-control");
                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.recogList = new WinJS.Binding.List([]);
                this.recog = document.createElement("div");
                this.recog.className = "recog-list";
                this.recogLv = new WinJS.UI.ListView(this.recog, {
                    itemDataSource: this.recogList.dataSource,
                    itemTemplate: utils.markSupportedForProcessing(function (itemPromise) {
                        return itemPromise.then(function (item) {
                            var div = document.createElement("div");
                            utils.addClass(div, "suggest")
                            div.innerText = item.data.text;
                            return div;
                        });
                    }),
                    oniteminvoked: utils.markSupportedForProcessing(function (e) {
                        that.callEvent(0, that.recogList.getAt(e.detail.itemIndex).text);
                        that.callEvent(2);
                        that.clearAll();
                    })
                });
                this.element.appendChild(this.recog);

                this.canvas = document.createElement("canvas");
                this.element.appendChild(this.canvas);
                this.context = this.canvas.getContext("2d");
                this.context.canvas.height = this.canvas.clientHeight;
                this.context.canvas.width = this.canvas.clientWidth;
                this.context.strokeStyle = "#fff";
                this.context.lineJoin = "round";
                this.context.lineWidth = 5;

                this.action = document.createElement("div");
                this.action.className = "action";

                this.backSpace = document.createElement("i");
                this.backSpace.className = "md md-backspace material-grid-col-1";
                this.backSpace.onclick = function (e) {
                    that.clearAll();
                    that.callEvent(1);
                }
                this.action.appendChild(this.backSpace);

                this.spaceBar = document.createElement("div");
                this.spaceBar.className = "space-bar material-grid-col-2";
                this.spaceBar.innerText = "space";
                this.spaceBar.onclick = function () {
                    that.clearAll();
                    that.callEvent(2);
                    that.callEvent(0, " ");
                    that.callEvent(2);
                }
                this.action.appendChild(this.spaceBar);

                this.doneKey = document.createElement("i");
                this.doneKey.className = "md md-check material-grid-col-3";
                this.doneKey.onclick = function () {
                    that.clearAll();
                    that.callEvent(2);
                }
                this.action.appendChild(this.doneKey);

                this.element.appendChild(this.action);

                var offsetTop = this.canvas.offsetParent.offsetTop + 48;
                var offsetLeft = this.canvas.offsetParent.offsetLeft;

                this.clearAll();

                this.canvas.onmousedown = function (e) {
                    that.paint = true;
                    that.addClick(e.pageX - offsetLeft, e.pageY - offsetTop);
                };

                this.canvas.onmousemove = function (e) {
                    if (that.paint)
                        that.addClick(e.pageX - offsetLeft, e.pageY - offsetTop, true);
                };

                this.canvas.onmouseup = function (e) {
                    that.paint = false;
                    that.clickInk.push([that.clickX, that.clickY, that.clickZ]);
                    that.clickX = new Array();
                    that.clickY = new Array();
                    that.clickZ = new Array();
                    that.getHandwriting();
                };

                this.canvas.onmouseleave = function (e) {
                    that.paint = false;
                };


            }, {
                dlist: [",", ".", "?", "!", ":", "'", "\"", ";", "@"],

                callEvent: function(del, text) {
                    this.dispatchEvent("edit", {
                        eType: del,
                        eText: text
                    });
                },

                getHandwriting: function () {
                    var that = this;
                    if (this._promise) this._promise.cancel();
                    this._promise = WinJS.Promise.as().then(function () {
                        var useHTTPS = (typeof localSettings.values["https"] != 'undefined') ? localSettings.values["https"] : false;
                        var http_prefix = (useHTTPS == true) ? "https" : "http";
                        var url = http_prefix + "://www.google.com/inputtools/request?ime=handwriting&app=mobilesearch&cs=1&oe=UTF-8";
                        var data = {
                            "device": "Mozilla/5.0 (Linux; Android 4.0.4; GT-i9100 Build/IML74K) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.49 Mobile Safari/537.31 ApiKey/1.257",
                            "options": "enable_pre_space",
                            "requests": [
                                {
                                    "writing_guide": {
                                        "writing_area_width": that.context.canvas.width,
                                        "writing_area_height": that.context.canvas.height
                                    },
                                    "ink": that.clickInk,
                                    "language": localSettings.values["inputLang"]
                                }
                            ],
                        };
                        Custom.Utils.showNotif(WinJS.Resources.getString("recognizing").value);
                        return WinJS.xhr({
                            type: "post",
                            url: url,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            data: JSON.stringify(data)
                        })
                    }).then(function (response) {
                        if (response) {
                            return JSON.parse(response.response)[1][0][1];
                        }
                    }).then(function (result) {
                        if (!that.recogList) return;
                        if (result.length > 0) {
                            that.recogList.splice(0, that.recogList.length);
                            result.forEach(function (suggestion) {
                                that.recogList.push({
                                    text: suggestion
                                })
                            });
                            that.callEvent(0, result[0]);
                        }
                    }).then(null, function (err) {
                        if (err.name != "Canceled")
                            Custom.Utils.popupNoInternet();
                    }).then(function () {
                        Custom.Utils.hideNotif();
                    }, function () {
                        Custom.Utils.hideNotif();
                    });
                },

                clearAll: function () {
                    this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
                    this.clickInk = new Array();
                    this.clickX = new Array();
                    this.clickY = new Array();
                    this.clickZ = new Array();
                    this.clickDrag = new Array();
                    this.startTime = new Date().getTime();
                    this.paint = false;

                    var recogList = this.recogList;
                    recogList.splice(0, recogList.length);
                    this.dlist.forEach(function (suggestion) {
                        recogList.push({
                            text: suggestion
                        })
                    });
                },

                addClick: function (x, y, dragging) {
                    this.clickX.push(Math.round(x));
                    this.clickY.push(Math.round(y));
                    this.clickDrag.push(dragging);
                    var time = new Date().getTime();
                    this.clickZ.push(time - this.startTime);
                    var i = this.clickX.length - 1;
                    this.context.beginPath();
                    if (this.clickDrag[i] && i)
                        this.context.moveTo(this.clickX[i - 1], this.clickY[i - 1]);
                    else
                        this.context.moveTo(this.clickX[i] - 1, this.clickY[i]);
                    this.context.lineTo(this.clickX[i], this.clickY[i]);
                    this.context.closePath();
                    this.context.stroke();
                },

                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.onedit = null;
                    this.clickX = null;
                    this.clickY = null;
                    this.clickZ = null;
                    this.clickDrag = null;
                    this.clickInk = null;
                    this.paint = null;
                    this.startTime = null;
                    this.recog = null;
                    this.recogLv = null;
                    this.recogList = null;
                    this.canvas = null;
                    this.context = null;
                    this.action = null;
                    this.backSpace = null;
                    this.spaceBar = null;
                    this.doneKey = null;
                    this.dlist = null;
                    if (this._promise)
                        this._promise.cancel();
                    this._promise = null;
                }
            }
       ),
       Speak: WinJS.Class.define(
            function (element, options) {
                var that = this;
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "speak-control");
                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.listenButton = document.createElement("div");
                this.listenButton.className = "listen";
                var md = document.createElement("i");
                md.className = "md md-keyboard-voice";
                this.listenButton.appendChild(md);
                this.listenButton.onclick = function () {
                    if (utils.hasClass(that.element, "active"))
                        that.stopRecord();
                    else
                        that.startRecord();
                };
                this.element.appendChild(this.listenButton);

                this.waveA = document.createElement("div");
                this.waveA.className = "wave";
                this.element.appendChild(this.waveA);

                this.waveB = document.createElement("div");
                this.waveB.className = "wave2";
                this.element.appendChild(this.waveB);

                this.progress = document.createElement("progress");
                this.element.appendChild(this.progress);

                this.initDevice();

            }, {

                initDevice: function() {
                    this.captureInitSettings = null;
                    this.captureInitSettings = new Windows.Media.Capture.MediaCaptureInitializationSettings();
                    this.captureInitSettings.audioDeviceId = "";
                    this.captureInitSettings.videoDeviceId = "";
                    this.captureInitSettings.streamingCaptureMode = Windows.Media.Capture.StreamingCaptureMode.audio;
                    this.systemMediaControls = Windows.Media.SystemMediaTransportControls.getForCurrentView();
                },

                releaseDevice: function() {
                    if (this.recordState == "recording" || this.mediaCaptureMgr != null) {
                        utils.removeClass(this.element, "active");
                        clearInterval(this.checkTime);
                        this.recordState = null;
                        this.mediaCaptureMgr.close();
                        this.mediaCaptureMgr = null;
                        app.removeEventListener("checkpoint", this.releaseDevice);
                        this.systemMediaControls.onpropertychanged = null;
                    }
                },

                startRecord: function () {
                    var that = this;
                    utils.addClass(this.element, "active");

                    if (this.mediaCaptureMgr == null) {
                        this.mediaCaptureMgr = new Windows.Media.Capture.MediaCapture();
                        WinJS.Application.addEventListener("checkpoint", this.releaseDevice);
                        this.systemMediaControls.onpropertychanged = function (e) {
                            if (e.property === Windows.Media.SystemMediaTransportControlsProperty.soundLevel) {
                                if (e.target.soundLevel === Windows.Media.SoundLevel.muted)
                                    that.releaseDevice();
                                else
                                    that.initDevice();
                            }
                        }
                    }
                    this.mediaCaptureMgr.initializeAsync(this.captureInitSettings).then(function () {
                        that.checkTime = setInterval(function () {
                            that.stopRecord();
                        }, 10000);
                        that.recordState = "recording";
                        var encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createWav(Windows.Media.MediaProperties.AudioEncodingQuality.auto);
                        encodingProfile.audio.sampleRate = 16000;
                        encodingProfile.audio.channelCount = 1;
                        that.soundStream = new Windows.Storage.Streams.InMemoryRandomAccessStream();
                        return that.mediaCaptureMgr.startRecordToStreamAsync(encodingProfile, that.soundStream);
                    }).then(null, function() {});
                },

                stopRecord: function () {
                    var that = this;
                    clearInterval(this.checkTime);
                    utils.removeClass(this.element, "active");
                    if (this.recordState == "recording") {
                        Custom.Utils.showNotif(WinJS.Resources.getString("recognizing").value);
                        utils.addClass(this.element, "loading");
                        this.mediaCaptureMgr.stopRecordAsync().then(function () {
                            that.recordState = null;
                            that.mediaCaptureMgr.close();
                            that.mediaCaptureMgr = null;
                            app.removeEventListener("checkpoint", that.release);
                            that.systemMediaControls.onpropertychanged = null;
                            var blob = MSApp.createBlobFromRandomAccessStream("audio/l16", that.soundStream);
                            that.soundStream = null;
                            var useHTTPS = (typeof localSettings.values["https"] != 'undefined') ? localSettings.values["https"] : false;
                            var http_prefix = (useHTTPS == true) ? "https" : "http";
                            var url  = http_prefix + "://www.google.com/speech-api/v2/recognize?output=json&lang=" + localSettings.values["inputLang"] + "&key=AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw"
                            if (that._promise) that._promise.cancel();
                            that._promise = WinJS.xhr({
                                type: "POST",
                                url: url,
                                data: blob,
                                headers: {
                                    "Content-Type": "audio/l16; rate=16000"
                                }
                            }).then(
                                function (result) {
                                    utils.removeClass(that.element, "loading");
                                    Custom.Utils.hideNotif();
                                    var response = result.response;
                                    if (response.length > 14) {
                                        response = response.substring(14, response.length);
                                        var spres = JSON.parse(response).result[0].alternative[0].transcript;
                                        that.callEvent(0, spres);
                                        that.callEvent(2);
                                    }
                                },
                                function () {
                                    Custom.Utils.popupNoInternet();
                                    Custom.Utils.hideNotif();
                                    utils.removeClass(that.element, "loading");
                                }
                            );
                        });
                    }
                },

                callEvent: function(del, text) {
                    this.dispatchEvent("edit", {
                        eType: del,
                        eText: text
                    });
                },

                dispose: function () {
                    if (this._disposed) { return; }
                    this._disposed = true;
                    utils.disposeSubTree(this.element);
                    this.onedit = null;
                    this.releaseDevice();
                    this.listenButton = null;
                    this.waveA = null;
                    this.waveB = null;
                    this.progress = null;
                    this.soundStream = null;
                    this.recordState = null;
                    this.checkTime = null;
                    this.captureInitSettings = null;
                    this.mediaCaptureMgr = null;
                    this.systemMediaControls = null;
                    if (this._promise) this._promise.cancel();
                    this._promise = null;
                }
            }
       ),
       Dictionary: WinJS.Class.define(
            function (element, options) {
                var that = this;
                this.element = element;
                element.winControl = this;

                utils.addClass(this.element, "win-disposable");
                this._disposed = false;

                this.type = options.type;
                this.element.onclick = this._navtoDict.bind(this);
            },
            {
                dict: {
                    get: function () { return this._dict; },
                    set: function (value) {
                        this._dict = value;
                        if (value.length > 0)
                            this.element.hidden = false;
                        else
                            this.element.hidden = true;
                    }
                },

                _navtoDict: function () {
                    nav.navigate("/pages/p-dict/p-dict.html", { dict: this.dict, title: this.title, type: this.type, source: this.source });
                }
            }
        ),
        SetData: WinJS.Class.define(
             function (element, options) {
                 var that = this;
                 this.element = element;
                 element.winControl = this;

                 utils.addClass(this.element, "win-disposable");
                 this._disposed = false;

                 this.type = options.type;
                 this.element.onclick = this._setData.bind(this);
             },
             {
                 _setData: function () {
                     var pageControl = Custom.Navigation.navigator.pageControl;
                     pageControl.bindingData.inputLang = this.inputLang;
                     pageControl.bindingData.outputLang = this.outputLang;
                     pageControl.bindingData.inputText = this.inputText;
                 }
             }
         )
    });

    WinJS.Class.mix(Custom.Control.Write,
           WinJS.Utilities.createEventProperties("edit"),
           WinJS.UI.DOMEventMixin);

    WinJS.Class.mix(Custom.Control.Speak,
       WinJS.Utilities.createEventProperties("edit"),
       WinJS.UI.DOMEventMixin);

})();

(function () {
    "use strict";

    WinJS.Namespace.define("Custom.Converter", {
        languageString: WinJS.Binding.converter(function (language_id) {
            if (language_id == "auto") return WinJS.Resources.getString("auto").value;
            return WinJS.Resources.getString(language_id).value;
        }),
        swapDisabled: WinJS.Binding.converter(function (language_id) {
            if (language_id == "auto") return true;
            return false;
        }),
        speechDisabled: WinJS.Binding.converter(function (language_id) {
            var cn = "md md md-keyboard-voice";
            if (language_id == "auto") return cn + " disabled";

            var speechArr = [
              "af", "ar", "eu", "bg", "ca", "zh", "hr", "cs", "nl", "tl", "fi", "fr", "gl", "de", "iw", "hi", "hu", "is",
              "id",  "it", "ja", "ko", "ms", "no", "pl", "pt", "ro", "ru", "sr", "sk", "es", "sv", "th", "tr",
              "uk", "vi", "zu", "en"
            ]; // YES
            if (speechArr.indexOf(language_id) > -1) return cn;
            return cn + " disabled";
        }),
        gestureDisabled: WinJS.Binding.converter(function (language_id) {
            var gestureArr = ["hy", "ka", "ig", "ha", "yo", "yi", "st", "my", "si", "kk", "tg", "uz", "tlh", "otq", "yua"]; // NO
            if (gestureArr.indexOf(language_id) > -1) return true;
            return false;
        }),
        cameraDisabled: WinJS.Binding.converter(function (language_id) {
            var cn = "md md-camera-alt";
            var cameraArr = ["en", "zh", "zh-TW", "ce", "da", "nl", "fi", "fr", "de", "el", "hu", "it", "ja", "ko",
                             "no", "pl", "pt", "ru", "es", "sv", "tr"]; // YES
            if (cameraArr.indexOf(language_id) > -1) return cn;
            return cn + " disabled";;
        }),
        voiceDisabled: WinJS.Binding.converter(function (language_id) {
            var voiceArr = ["af", "sq", "ar", "hy", "bs", "ca", "zh", "zh-TW", "hr", "cs", "da",
                            "nl", "en", "eo", "fi", "fr", "de", "el", "ht", "hi", "hu", "is", "id", "it",
                            "ja", "ko", "la", "lv", "mk", "no", "pl", "pt", "ro", "ru", "sr", "sk", "es",
                            "sw", "sv", "ta", "th", "tr", "vi", "cy"]; // YES
            if (voiceArr.indexOf(language_id) > -1) return false;
            return true;
        }),
        forwardDisabled: WinJS.Binding.converter(function (str) {
            if (str.trim().length > 0) return false;
            return true;
        }),
    });

})();

(function () {
    "use strict";


    var langArr = ["af", "sq", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ceb", "ny", "zh", "zh-TW", "hr", "cs", "da", "nl", "en", "eo", "et", "tl",
                    "fi", "fr", "gl", "ka", "de", "el", "gu", "ht", "ha", "iw", "hi", "hmn", "hu", "is", "ig", "id", "ga", "it", "ja", "jw", "kn", "kk", "km",
                    "ko", "lo", "la", "lv", "lt", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "fa", "pl", "pt", "pa", "ro", "ru", "sr", "st",
                    "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tg", "ta", "te", "th", "tr", "uk", "ur", "uz", "vi", "cy", "yi", "yo", "zu",
                    "tlh", "otq", "yua"];

    function loadlanguageList() {
        Custom.Data.languageList.splice(0, Custom.Data.languageList.length);
        Custom.Data.langArr.forEach(function (language_id) {
            Custom.Data.languageList.push({
                language_id: language_id,
                language_name: WinJS.Resources.getString(language_id).value,
                main: 1
            });
        });
        Custom.Data.languageList.sort(function (x, y) {
            var xs = x.language_name;
            var ys = y.language_name;
            return xs.localeCompare(ys);
        });
    }

    var themeXList = new WinJS.Binding.List([
        { name: 'light', hex: '#fff', thex: '#000' },
        { name: 'dark', hex: '#000', thex: '#fff' },
    ]);

    var themeYList = new WinJS.Binding.List([
        { name: 'red', statusbar: { r: 211, g: 47, b: 47, a: 1 }, hex: '#F44336' },
        { name: 'pink', statusbar: { r: 194, g: 24, b: 91, a: 1 }, hex: '#E91E63' },
        { name: 'purple', statusbar: { r: 123, g: 31, b: 162, a: 1 }, hex: '#9C27B0' },
        { name: 'deep-purple', statusbar: { r: 81, g: 45, b: 168, a: 1 }, hex: '#673AB7' },
        { name: 'indigo', statusbar: { r: 48, g: 63, b: 159, a: 1 }, hex: '#3F51B5' },
        { name: 'blue', statusbar: { r: 13, g: 71, b: 161, a: 1 }, hex: '#1976D2' },
        { name: 'light-blue', statusbar: { r: 1, g: 87, b: 155, a: 1 }, hex: '#0288D1' },
        { name: 'cyan', statusbar: { r: 0, g: 151, b: 167, a: 1 }, hex: '#00BCD4' },
        { name: 'teal', statusbar: { r: 0, g: 121, b: 107, a: 1 }, hex: '#009688' },
        { name: 'green', statusbar: { r: 56, g: 142, b: 60, a: 1 }, hex: '#4CAF50' },
        { name: 'light-green', statusbar: { r: 85, g: 139, b: 47, a: 1 }, hex: '#689f38' },
        { name: 'deep-orange', statusbar: { r: 230, g: 74, b: 25, a: 1 }, hex: '#FF5722' },
        { name: 'brown', statusbar: { r: 93, g: 64, b: 55, a: 1 }, hex: '#795548' },
        { name: 'grey', statusbar: { r: 33, g: 33, b: 33, a: 1 }, hex: '#616161' },
        { name: 'blue-grey', statusbar: { r: 69, g: 90, b: 100, a: 1 }, hex: '#607D8B' },
    ]);

    var languageList = new WinJS.Binding.List([]);
    var groupedlanguageList = languageList
                              .createGrouped(
                                function (x) { return x.main; },
                                function (x) { return { main: x.main }; },
                                function (x, y) { return x - y; }
                              )

    WinJS.Namespace.define("Custom.Data", {
        langArr: langArr,
        languageList: languageList,
        groupedlanguageList: groupedlanguageList,
        loadlanguageList: loadlanguageList,
        themeXList: themeXList,
        themeYList: themeYList
    });

})();
(function () {
    "use strict";

    var activation = Windows.ApplicationModel.Activation;
    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;
    var utils = WinJS.Utilities;
    var rcns = Windows.ApplicationModel.Resources.Core;

    WinJS.Binding.optimizeBindingReferences = true;

    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    app.onactivated = function (args) {
        var p = WinJS.Promise.as().then(function () {
            var currentAppLang = Windows.Globalization.ApplicationLanguages.languages[0];
            if ((currentAppLang == "zh-CN") && (typeof localSettings.values["chinese-server"] != 'undefined'))
                localSettings.values["chinese-server"] = true;
            if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {
               if ((Custom.Device.isPhone)
               && (currentAppLang == "en-US")) {
                  var uri = new Windows.Foundation.Uri("ms-appx:///cortana.xml");
                  Windows.Storage.StorageFile.getFileFromApplicationUriAsync(uri).then(function (vcd) {
                      return Windows.Media.SpeechRecognition.VoiceCommandManager.installCommandSetsFromStorageFileAsync(vcd);
                  }).then(function () {
                      var phraseList = [];
                      Custom.Data.langArr.forEach(function (lang_id) {
                          phraseList.push(WinJS.Resources.getString(lang_id).value);
                      });
                      return Windows.Media.SpeechRecognition.VoiceCommandManager.installedCommandSets.lookup("modern_translate").setPhraseListAsync("outputLang", phraseList);
                  }).then(null, function (err) {});
              }
            }
            return Custom.UI.applyTheme().then(function () {
                return Custom.UI.applyStatusbar();
            }).then(function () {
                return Custom.SQLite.setupDatabase();
            });
        }).then(function () {

          if (localSettings.values["tile_fixed"] != true) {
            Windows.UI.StartScreen.SecondaryTile.findAllAsync().then(function(tiles) {
              tiles.forEach(function(tile) {
                tile.requestDeleteAsync()
              })
            }).then(function() {
              localSettings.values["tile_fixed"] = true;
            });
          }

            if (args.detail.kind == activation.ActivationKind.protocol) {
                var uriObj = args.detail.uri;
                nav.history = app.sessionState.history || {};
                nav.history.current.initialPlaceholder = true;
                ui.disableAnimations();
                return ui.processAll().then(function () {
                    Custom.Data.loadlanguageList();
                    if (uriObj.path == "translate") {
                        var params = new Windows.Foundation.WwwFormUrlDecoder(uriObj.query);
                        try {
                            var inputLang = params.getFirstValueByName("inputlang");
                            var outputLang = params.getFirstValueByName("outputlang");
                            var inputText = params.getFirstValueByName("inputtext");
                            if (inputLang && (Custom.Data.langArr.indexOf(inputLang) > -1) || (inputLang == "auto"))
                                localSettings.values["inputLang"] = inputLang;
                            if (outputLang && Custom.Data.langArr.indexOf(outputLang) > -1)
                                localSettings.values["outputLang"] = outputLang;
                            app.sessionState.inputText = inputText;
                        } catch (err) {}
                    }
                    return nav.navigate(nav.location || Custom.Navigation.navigator.home, nav.state);
                });
            }

            if (args.detail.kind === activation.ActivationKind.shareTarget) {
                var shareOperation = args.detail.shareOperation;
                if (shareOperation.data.contains(Windows.ApplicationModel.DataTransfer.StandardDataFormats.text)) {
                    return shareOperation.data.getTextAsync().then(
                        function (text) {
                            nav.history = app.sessionState.history || {};
                            nav.history.current.initialPlaceholder = true;
                            ui.disableAnimations();
                            return ui.processAll().then(function () {
                                Custom.Data.loadlanguageList();
                                app.sessionState.inputText = text;
                                return nav.navigate(Custom.Navigation.navigator.home);
                            });
                        }, function (e) {
                            shareOperation.reportError();
                        }
                    );
                }
            }

            if (args.detail.kind === activation.ActivationKind.voiceCommand) {
                var speechRecognitionResult = args.detail.result;
                var type = speechRecognitionResult.rulePath[0];
                var inputText = speechRecognitionResult.semanticInterpretation.properties.inputText[0];
                var outputLangName = speechRecognitionResult.semanticInterpretation.properties.outputLang[0];

                var outputLang = "en";
                for (var i = 0; i < Custom.Data.langArr.length; i++) {
                    var lang_id = Custom.Data.langArr[i];
                    var lang_str = WinJS.Resources.getString(lang_id).value;
                    if (outputLangName == lang_str) {
                        outputLang = lang_id;
                        break;
                    }
                }

                nav.history = app.sessionState.history || {};
                nav.history.current.initialPlaceholder = true;
                ui.disableAnimations();
                return ui.processAll().then(function () {
                    Custom.Data.loadlanguageList();
                    localSettings.values["inputLang"] = "auto";
                    localSettings.values["outputLang"] = outputLang;
                    app.sessionState.inputText = inputText;
                    return nav.navigate(Custom.Navigation.navigator.home);
                });
            }

            if (args.detail.kind === activation.ActivationKind.pickFileContinuation) {
                ui.disableAnimations();
                return ui.processAll().then(function () {
                    if (args.detail.detail[0].files[0])
                        return nav.navigate("/pages/p-camera/p-camera.html", { file: args.detail.detail[0].files[0] });
                });
            }

            if (args.detail.kind === activation.ActivationKind.launch) {
                nav.history = app.sessionState.history || {};
                nav.history.current.initialPlaceholder = true;
                ui.disableAnimations();
                return ui.processAll().then(function () {
                    Custom.Data.loadlanguageList();
                    if (args.detail.arguments.substr(0,13) == "tile_shortcut") {
                      var lang = args.detail.arguments.substr(13, args.detail.arguments.length - 13).split("_");
                      localSettings.values["inputLang"] = lang[0];
                      localSettings.values["outputLang"] = lang[1];
                      app.sessionState.inputText = "";
                      return nav.navigate(Custom.Navigation.navigator.home);
                    }
                    return nav.navigate(nav.location || Custom.Navigation.navigator.home, nav.state);
                });
            }
        }).then(function () {
          if (Custom.Utils.isPremium() == true) return;
          var adControlEl = document.querySelector("#adControl");

          var style = {};
          if (Custom.Device.isPhone == true) {
            if (window.innerWidth >= 480) {
              style.width = 480;
              style.height = 80;
            }
            else {
              style.width = 320;
              style.height = 50;
            }
          }
          else {
            style.width = 728;
            style.height = 90;
          }

          var options = {
            keywords: ["translation", "translator", "translate", "dictionary", "education"]
          };
          if (Custom.Device.isPhone == true) {
            options.applicationId = "e388bbd2-5e9e-4562-9ef4-79751efbd4fb";
            options.adUnitId = "11561360";
          }
          else {
            options.applicationId = "6863e6e4-65fb-48f5-8c05-56ea1b22237a";
            options.adUnitId = "11561359";
          }

          adControlEl.style.height = style.height+"px";
          adControlEl.style.width = style.width+"px";
          var adControl = new MicrosoftNSJS.Advertising.AdControl(
            adControlEl, options
          );
        }).then(function() {
          return sched.requestDrain(sched.Priority.aboveNormal + 1);
        }).then(function () {
          ui.enableAnimations();
        });
        p.done();
        args.setPromise(p);
    }

    app.onbackclick = function (e) {
        if (nav.history.current.location == "/pages/home/home.html") {
            var pageControl = Custom.Navigation.navigator.pageControl;
            if (pageControl.bindingData.selectMode != "hidden") {
                pageControl.bindingData.selectMode = "hidden";
                return true;
            }
            if (pageControl.bindingData.imeMode != "") {
                pageControl.bindingData.imeMode = "";
                return true;
            }
            if (pageControl.bindingData.expandinputBox == true) {
                pageControl.bindingData.expandinputBox = false;
                return true;
            }
        }
    }

    app.oncheckpoint = function (args) {
        app.sessionState.history = nav.history;

        if (window.soundPromise)
            window.soundPromise.cancel();

        if (window.dispRequest != null) {
            window.dispRequest.requestRelease();
            window.dispRequest = null;
        }

        if (nav.history.current.location == "/pages/home/home.html") {
            var pageControl = Custom.Navigation.navigator.pageControl;
            if (pageControl.bindingData.imeMode != "")
                pageControl.bindingData.imeMode = "";
        }

        if (nav.history.current.location == "/pages/p-livecamera/p-livecamera.html") {
            var pageControl = Custom.Navigation.navigator.pageControl;
            pageControl.disposeCamera();
        }
    };

    app.start();

})();

(function () {
    "use strict";

    var nav = WinJS.Navigation;

    WinJS.Namespace.define("Custom.Navigation", {
        PageControlNavigator: WinJS.Class.define(
            function PageControlNavigator(element, options) {
                this._element = element || document.createElement("div");
                this._element.appendChild(this._createPageElement());

                this.home = options.home;

                this._eventHandlerRemover = [];

                var that = this;
                function addRemovableEventListener(e, eventName, handler, capture) {
                    e.addEventListener(eventName, handler, capture);
                    that._eventHandlerRemover.push(function () {
                        e.removeEventListener(eventName, handler);
                    });
                };

                addRemovableEventListener(nav, 'navigating', this._navigating.bind(this), false);
                addRemovableEventListener(nav, 'navigated', this._navigated.bind(this), false);

                window.onresize = this._resized.bind(this);

                Custom.Navigation.navigator = this;
            }, {
                home: "",
                /// <field domElement="true" />
                _element: null,
                _lastNavigationPromise: WinJS.Promise.as(),
                _lastViewstate: 0,

                // This is the currently loaded Page object.
                pageControl: {
                    get: function () { return this.pageElement && this.pageElement.winControl; }
                },

                // This is the root element of the current page.
                pageElement: {
                    get: function () { return this._element.firstElementChild; }
                },

                // This function disposes the page navigator and its contents.
                dispose: function () {
                    if (this._disposed) {
                        return;
                    }

                    this._disposed = true;
                    WinJS.Utilities.disposeSubTree(this._element);
                    for (var i = 0; i < this._eventHandlerRemover.length; i++) {
                        this._eventHandlerRemover[i]();
                    }
                    this._eventHandlerRemover = null;
                },

                // Creates a container for a new page to be loaded into.
                _createPageElement: function () {
                    var element = document.createElement("div");
                    element.setAttribute("dir", window.getComputedStyle(this._element, null).direction);
                    element.style.position = "absolute";
                    element.style.visibility = "hidden";
                    element.style.width = "100%";
                    element.style.height = "100%";
                    return element;
                },

                // Retrieves a list of animation elements for the current page.
                // If the page does not define a list, animate the entire page.
                _getAnimationElements: function () {
                    if (this.pageControl && this.pageControl.getAnimationElements) {
                        return this.pageControl.getAnimationElements();
                    }
                    return this.pageElement.querySelector(".material-content");
                },

                _navigated: function () {
                    this.pageElement.style.visibility = "";
                    WinJS.UI.Animation.enterPage(this._getAnimationElements()).done();
                    WinJS.Resources.processAll(this.pageElement);
                },

                // Responds to navigation by adding new pages to the DOM. 
                _navigating: function (args) {

                    var newElement = this._createPageElement();
                    this._element.appendChild(newElement);

                    this._lastNavigationPromise.cancel();

                    var that = this;

                    function cleanup() {
                        if (that._element.childElementCount > 1) {
                            var oldElement = that._element.firstElementChild;
                            // Cleanup and remove previous element 
                            if (oldElement.winControl) {
                                if (oldElement.winControl.unload) {
                                    oldElement.winControl.unload();
                                }
                                oldElement.winControl.dispose();
                            }
                            oldElement.parentNode.removeChild(oldElement);
                            oldElement.innerText = "";
                        }
                    }

                    this._lastNavigationPromise = WinJS.Promise.as().then(function () {
                        return WinJS.UI.Pages.render(args.detail.location, newElement, args.detail.state);
                    }).then(cleanup, cleanup);

                    args.detail.setPromise(this._lastNavigationPromise);
                },

                // Responds to resize events and call the updateLayout function
                // on the currently loaded page.
                _resized: function (args) {
                    if (this.pageControl && this.pageControl.updateLayout) {
                        this.pageControl.updateLayout.call(this.pageControl, this.pageElement);
                    }
                },
            }
        )
    });
})();

(function () {
    "use strict";

    var app = WinJS.Application;
    var sched = WinJS.Utilities.Scheduler;

    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    function runPromisesInSerial (promiseFunctions) {
        return promiseFunctions.reduce(function (promiseChain, nextPromiseFunction) {
            return promiseChain.then(nextPromiseFunction);
        },
        WinJS.Promise.wrap());
    }

    function executeAsTransactionAsync (database, workItemAsyncFunction) {
        return database.executeAsync("BEGIN TRANSACTION").then(workItemAsyncFunction).then(
            function (result) {
                var successResult = result;
                return database.executeAsync("COMMIT").then(function () {
                    return successResult;
                });
            },
            function (error) {
                var errorResult = error;
                return database.executeAsync("COMMIT").then(function () {
                    throw errorResult;
                });
            });
    }


    function executeStatementsAsTransactionAsync (database, statements) {
        var executeStatementPromiseFunctions = statements.map(function statementToPromiseFunction(statement) {
            return database.executeAsync.bind(database, statement);
        });

        return executeAsTransactionAsync(database, function () {
            return runPromisesInSerial(executeStatementPromiseFunctions);
        });
    }

    function bindAndExecuteStatementsAsTransactionAsync (database, statementsAndParameters) {
        var bindAndExecuteStatementPromiseFunctions = statementsAndParameters.map(function (statementAndParameter) {
            return database.bindAndExecuteAsync.bind(database, statementAndParameter.statement, statementAndParameter.parameters);
        });

        return executeAsTransactionAsync(database, function () {
            return runPromisesInSerial(bindAndExecuteStatementPromiseFunctions);
        });
    }

    function insertObject (database, table_name, obj) {
        return WinJS.Promise.as().then(function () {
            var parameters = [];

            var st1 = "(";
            var st2 = "(";
            var i = -1;
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    var val = obj[key];
                    if (val == null) continue;
                    i++;
                    if (i > 0) {
                        st1 += ", ";
                        st2 += ",";
                    }
                    st1 += key;
                    st2 += "?";
                    if (typeof val != "string")
                        val = JSON.stringify(val);
                    obj[key] = val;
                    parameters.push(obj[key]);
                }
            }
            st1 += ")";
            st2 += ")";

            var statement = "INSERT INTO " + table_name + " " + st1 + " VALUES " + st2;

            return database.bindAndExecuteAsync(statement, parameters);
        }).then(function () {
            var statement = "SELECT last_insert_rowid();";
            return database.executeAsync(statement);
        }).then(function (x) {
            obj.id = x[0].getFirstValueByName("last_insert_rowid()");
            return obj;
        });

    }

    function entriestoObj (entries) {
        var obj = {};
        entries.forEach(function (entry) {
            obj[entry.name] = entry.value;
        });
        return obj;
    }

    function setupDatabase () {
        return SQLite.Database.openDatabaseInFolderAsync(Windows.Storage.ApplicationData.current.localFolder, "ft.db")
            .then(function (openedOrCreatedDatabase) {
                Custom.SQLite.localDatabase = openedOrCreatedDatabase;
                return Custom.SQLite.executeStatementsAsTransactionAsync(Custom.SQLite.localDatabase,
                    [
                        "CREATE TABLE IF NOT EXISTS history (id INTEGER PRIMARY KEY AUTOINCREMENT, inputLang TEXT NOT NULL, outputLang TEXT NOT NULL, inputText TEXT NOT NULL, outputText TEXT NOT NULL, inputRoman TEXT, outputRoman TEXT, inputDict TEXT, outputDict TEXT, source TEXT NOT NULL);",
                        "CREATE TABLE IF NOT EXISTS favorites (id INTEGER PRIMARY KEY AUTOINCREMENT, history_id INTEGER, inputLang TEXT NOT NULL, outputLang TEXT NOT NULL, inputText TEXT NOT NULL, outputText TEXT NOT NULL, inputRoman TEXT, outputRoman TEXT, inputDict TEXT, outputDict TEXT, source TEXT NOT NULL);",
                    ]
                );
            });
    }

     WinJS.Namespace.define("Custom.SQLite", {
        localDatabse: null,
        executeAsTransactionAsync: executeAsTransactionAsync,
        executeStatementsAsTransactionAsync: executeStatementsAsTransactionAsync,
        bindAndExecuteStatementsAsTransactionAsync: bindAndExecuteStatementsAsTransactionAsync,
        insertObject: insertObject,
        entriestoObj: entriestoObj,
        setupDatabase: setupDatabase
    });

})();

(function () {
    "use strict";

    var app = WinJS.Application;

    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    function translateByGoogle (inputLang, outputLang, inputText) {
        return WinJS.Promise.as().then(function () {
            if (encodeURIComponent(inputText).length > 1000) {
                return WinJS.Promise.as().then(function () {
                    var tmp = inputText.substr(0, 100);
                    for (var i = 200; i < inputText.length; i = i + 100) {
                        if (encodeURIComponent(inputText.substr(0, i)).length > 1000) {
                            break;
                        }
                        tmp = inputText.substr(0, i);
                    }

                    var last = tmp.lastIndexOf(" ");
                    if (last == -1) last = tmp.length - 1;
                    var ltext = tmp.substr(0, last);
                    var rtext = inputText.substr(last + 1, inputText.length - ltext.length);

                    var lres, rres;
                    var promises = [];
                    promises.push(Custom.Translate.translateByGoogle(inputLang, outputLang, ltext).then(function (result) {
                        lres = result;
                    }));

                    promises.push(Custom.Translate.translateByGoogle(inputLang, outputLang, rtext).then(function (result) {
                        rres = result;
                    }));

                    return WinJS.Promise.join(promises).then(function () {
                        if ((!lres) || (!rres)) return;
                        return {
                            inputLang: lres.inputLang,
                            suggestedinputLang: lres.outputLang,
                            inputText: lres.inputText + rres.inputText,
                            suggestedinputText: null,
                            inputRoman: lres.inputRoman + rres.inputRoman,
                            inputDict: "",

                            outputLang: outputLang,
                            outputText: lres.outputText + rres.outputText,
                            outputRoman: lres.outputRoman + rres.outputRoman,
                            outputDict: "",
                            source: "google"
                        }
                    });

                });
            }
            else {
                var url = encodeURI(Custom.Utils.getDomain() + "/translate_a/single?client=t&sl=" + inputLang + "&tl=" + outputLang + "&hl=en&dt=bd&dt=ex&dt=ld&dt=md&dt=qc&dt=rw&dt=rm&dt=ss&dt=t&dt=at&ie=UTF-8&oe=UTF-8&prev=btn&ssel=4&tsel=4&tk=0&q=" + inputText)
                return WinJS.xhr({
                    type: "get",
                    url: url,
                    responseType: "json"
                }).then(function (response) {

                    var raw = response.response;
                    raw = Custom.Utils.standardlizeJSON(raw);
                    var result = JSON.parse(raw);

                    var outputText = "";
                    var inputRoman = "";
                    var outputRoman = "";
                    if (result[0]) {
                        result[0].forEach(function (part) {
                            if (part[0]) outputText += part[0];
                            if (!part[0]) {
                                if (part[2]) outputRoman += part[2];
                                if (part[3]) inputRoman += part[3];
                            }
                        });
                    }

                    var inputLang = result[2];
                    if (inputLang == 'zh-CN') inputLang = 'zh';
                    var inputDict;
                    if ((result[11]) || (result[12]) || (result[13]) || (result[14]))
                        inputDict = [result[11], result[12], result[13], result[14]];

                    var inputDict = inputDict;
                    var outputDict = result[1];

                    var suggestedinputLang;
                    if (result[8]) {
                        suggestedinputLang = result[8][0][0];
                    }
                    if (suggestedinputLang == 'zh-CN') suggestedinputLang = 'zh';

                    var suggestedinputText;
                    if (result[7]) {
                        suggestedinputText = result[7][1];
                    }


                    return {
                        inputLang: inputLang,
                        suggestedinputLang: suggestedinputLang,
                        inputText: inputText,
                        suggestedinputText: suggestedinputText,
                        inputRoman: inputRoman,
                        inputDict: inputDict ? JSON.stringify(inputDict) : "",

                        outputLang: outputLang,
                        outputText: outputText,
                        outputRoman: outputRoman,
                        outputDict: outputDict ? JSON.stringify(outputDict) : "",
                        source: "google"
                    }

                });
            }
        });
    }

    function translateinBatchByGoogle(inputLang, outputLang, inputArr) {
        var url = Custom.Utils.getDomain() + "/translate_a/t?client=mt&sl=" + inputLang + "&tl=" + outputLang + "&hl=en&v=1.0&tk=0";

        var nextArr = [];

        for (var i = 0; i < inputArr.length; i++) {
            if (encodeURI(url + "&q" + inputArr[i]).length > 2000) {
                nextArr = inputArr.slice(i, inputArr.length);
                break;
            }
            else {
                url += "&q=";
                url += inputArr[i];
            }
        }
        url = encodeURI(url);


        return WinJS.xhr({
            type: "get",
            url: url,
            responseType: "json"
        }).then(function (response) {
            return JSON.parse(response.response);
        });
    }

    function translateByBing(inputLang, outputLang, inputText) {

        return WinJS.Promise.as().then(function () {
            if (app.sessionState.bingAppId)
                return app.sessionState.bingAppId;
            var url = "http://www.bing.com/translator/dynamic/213366/js/LandingPage.js";
            return WinJS.xhr({
                type: "get",
                url: url,
            }).then(function (response) {
                app.sessionState.bingAppId = response.response.substr(response.response.indexOf("appId:") + 6, 47);
                return app.sessionState.bingAppId;
            });
        }).then(function (appId) {
            var tmpinputLang = inputLang;
            if (tmpinputLang == "auto")
                tmpinputLang = "";
            else if (tmpinputLang == "zh")
                tmpinputLang = "zh-CHS";
            else if (tmpinputLang == "zh-TW")
                tmpinputLang = "zh-CHT";

            var tmpoutputLang = outputLang;
            if (tmpoutputLang == "zh")
                tmpoutputLang = "zh-CHS";
            else if (tmpoutputLang == "zh-TW")
                tmpoutputLang = "zh-CHT";

            var texts = inputText.split("\n");
            var url = encodeURI("http://api.microsofttranslator.com/v2/ajax.svc/TranslateArray2?appId=" + appId + "&texts=" + JSON.stringify(texts) + "&from=" + tmpinputLang + "&to=" + tmpoutputLang + "&options={}");
            return WinJS.xhr({
                type: "get",
                url: url,
                responseType: "json"
            }).then(function (response) {
                var result = JSON.parse(response.response);
                if (typeof result != "object") {
                    app.sessionState.bingAppId = null;
                    throw "appid_expired";
                }

                if (inputLang == "auto") {
                    inputLang = result[0].From;
                    if (inputLang == "zh-CHS")
                        inputLang = "zh";
                    else if (inputLang == "zh-CHT")
                        inputLang = "zh-TW";
                }

                var outputText = "";
                result.forEach(function (x) {
                    outputText += x.TranslatedText + "\n";
                });

                return {
                    inputLang: inputLang,
                    suggestedinputLang: null,
                    inputText: inputText,
                    suggestedinputText: null,
                    inputRoman: "",
                    inputDict: "",

                    outputLang: outputLang,
                    outputText: outputText,
                    outputRoman: "",
                    outputDict: "",
                    source: "bing"
                };
            });
        }).then(function (data) {
            if (inputText.indexOf(" ") > -1)
                return data;
            var url = encodeURI("http://www.microsofttranslator.com/dictionary.ashx?from=" + inputLang + "&to=" + outputLang + "&text=" + inputText);
            return WinJS.xhr({
                type: "get",
                url: url,
                responseType: "json"
            }).then(function (response) {
                if (response.response.length <= 25)
                    return data;
                data.outputDict = response.response.substring(21, response.response.length - 4);
                return data;
            }, function (err) {
                return data;
            })
        });
    }

    function translateinBatchByBing(inputLang, outputLang, inputArr) {

        return WinJS.Promise.as().then(function () {
            if (app.sessionState.bingAppId)
                return app.sessionState.bingAppId;
            var url = "http://www.bing.com/translator/dynamic/0/js/LandingPage.js";
            return WinJS.xhr({
                type: "get",
                url: url,
            }).then(function (response) {
                app.sessionState.bingAppId = response.response.substr(459, 47);
                return app.sessionState.bingAppId;
            });
        }).then(function (appId) {
            if (inputLang == "auto")
                inputLang = "";
            else if (inputLang == "zh")
                inputLang = "zh-CHS";
            else if (inputLang == "zh-TW")
                inputLang = "zh-CHT";
            var inputTexts = JSON.stringify(inputArr);
            var url = encodeURI("http://api.microsofttranslator.com/v2/ajax.svc/TranslateArray2?appId=" + appId + "&texts=" + inputTexts + "&from=" + inputLang + "&to=" + outputLang + "&options={}");
            return WinJS.xhr({
                type: "get",
                url: url,
                responseType: "json"
            }).then(function (response) {
                var result = JSON.parse(response.response);
                if (typeof result != "object") {
                    app.sessionState.bingAppId = null;
                    throw "appid_expired";
                }
                var arr = [];
                result.forEach(function (x) {
                    arr.push(x.TranslatedText);
                });
                return arr;
            });
        });
    }

    var supportedbyBing = ["auto", "he", "pl", "ar", "hi", "pt", "bg", "ca", "hu", "ro", "zh", "id",
                            "ru", "zh-TW", "it", "sk", "cs", "ja", "sl", "da", "es", "nl", "sv", "en",
                            "ko", "th", "et", "lv", "tr", "fi", "lt", "uk", "fr", "ms", "ur", "de", "mt",
                            "vi", "el", "no", "cy", "ht", "fa", "tlh", "otq", "yua"];

    function translate(inputLang, outputLang, inputText) {
        return WinJS.Promise.as().then(function () {
            if (inputText.length < 1) return;

            if (["tlh", "otq", "yua"].indexOf(inputLang) > -1) {
                if (supportedbyBing.indexOf(outputLang) > -1)
                    return Custom.Translate.translateByBing(inputLang, outputLang, inputText);

                return Custom.Translate.translateByBing(inputLang, "en", inputText).then(function (result) {
                    return Custom.Translate.translateByGoogle("en", outputLang, result.outputText);
                });
            }

            if (["tlh", "otq", "yua"].indexOf(outputLang) > -1) {
                if (supportedbyBing.indexOf(inputLang) > -1)
                    return Custom.Translate.translateByBing(inputLang, outputLang, inputText);

                return Custom.Translate.translateByGoogle(inputLang, "en", inputText).then(function (result) {
                    return Custom.Translate.translateByBing("en", outputLang, result.outputText);
                });
            }

            if ((localSettings.values["bing"] == true) && (supportedbyBing.indexOf(inputLang) > -1) && (supportedbyBing.indexOf(outputLang) > -1))
                return Custom.Translate.translateByBing(inputLang, outputLang, inputText);

            return Custom.Translate.translateByGoogle(inputLang, outputLang, inputText);
        }).then(null, function (err) {});
    }

    function translateinBatch(inputLang, outputLang, inputArr) {
        return WinJS.Promise.as().then(function () {

            if (["tlh", "otq", "yua"].indexOf(inputLang) > -1) {
                if (supportedbyBing.indexOf(outputLang) > -1)
                    return Custom.Translate.translateinBatchByBing(inputLang, outputLang, inputArr);

                return Custom.Translate.translateinBatchByBing(inputLang, "en", inputArr).then(function (result) {
                    return Custom.Translate.translateinBatchByGoogle("en", outputLang, result);
                });
            }

            if (["tlh", "otq", "yua"].indexOf(outputLang) > -1) {
                if (supportedbyBing.indexOf(inputLang) > -1)
                    return Custom.Translate.translateinBatchByBing(inputLang, outputLang, inputArr);

                return Custom.Translate.translateinBatchByGoogle(inputLang, "en", inputArr).then(function (result) {
                    return Custom.Translate.translateinBatchByBing("en", outputLang, result.outputText);
                });
            }

            if ((localSettings.values["bing"] == true) && (supportedbyBing.indexOf(inputLang) > -1) && (supportedbyBing.indexOf(outputLang) > -1))
                return Custom.Translate.translateinBatchByBing(inputLang, outputLang, inputArr);

            return Custom.Translate.translateinBatchByGoogle(inputLang, outputLang, inputArr);
        }).then(null, function (err) {});
    }

    WinJS.Namespace.define("Custom.Translate", {
        translateByGoogle: translateByGoogle,
        translateinBatchByGoogle: translateinBatchByGoogle,
        translateByBing: translateByBing,
        translateinBatchByBing: translateinBatchByBing,
        translate: translate,
        translateinBatch: translateinBatch
    });

})();

(function () {
    "use strict";

    var app = WinJS.Application;
    var utils = WinJS.Utilities;
    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    function importCSS(url) {
        var ss = document.styleSheets;
        for (var i = 0, max = ss.length; i < max; i++) {
            if (ss[i].href == url)
                return;
        }
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url;

        document.getElementsByTagName("head")[0].appendChild(link);
    }

    function applyTheme() {
        return WinJS.Promise.as().then(function () {

            if (typeof localSettings.values["x-theme"] == "undefined")
                localSettings.values["x-theme"] = "light";

            if (typeof localSettings.values["y-theme"] == "undefined")
                localSettings.values["y-theme"] = "light-green";

            var x_theme = localSettings.values["x-theme"];
            var y_theme = localSettings.values["y-theme"];

            importCSS("/Microsoft.WinJS.4.0/css/ui-" + x_theme + ".css");
            importCSS("/WinJS.Material/css/material-" + x_theme + ".css");
            importCSS("/WinJS.Material/css/themes/" + y_theme + ".css");

            document.body.setAttribute('x-theme', x_theme);
            document.body.setAttribute('y-theme', y_theme);
            if (Custom.Device.isPhone)
                utils.addClass(document.body, "phone");
        });
    }

    function applyStatusbar() {
        return WinJS.Promise.as().then(function () {

            var backgroundColor = null;
            var foregroundColor = { r: 255, g: 255, b: 255, a: 1 };

            var y_theme = localSettings.values["y-theme"];
            Custom.Data.themeYList.every(function (data) {
                if (data.name == y_theme) {
                    backgroundColor = data.statusbar;
                    return false;
                }
                return true;
            });


            if (Custom.Device.isPhone) {
                var statusBar = Windows.UI.ViewManagement.StatusBar.getForCurrentView();
                if (localSettings.values["statusbar"] != false) {
                    if (backgroundColor) {
                        statusBar.backgroundColor = backgroundColor;
                        statusBar.foregroundColor = { r: 255, g: 255, b: 255, a: 1 };
                        statusBar.backgroundOpacity = 1;
                        statusBar.showAsync();
                    }
                }
                else {
                    statusBar.hideAsync();
                }
            }
            else {
                var v = Windows.UI.ViewManagement.ApplicationView.getForCurrentView();
                if (v.titleBar) {
                    v.titleBar.backgroundColor = backgroundColor;
                    v.titleBar.foregroundColor = foregroundColor;
                    v.titleBar.buttonBackgroundColor = backgroundColor;
                    v.titleBar.buttonForegroundColor = foregroundColor;
                }
            }
        });
    }

    WinJS.Namespace.define("Custom.UI", {
        importCSS: importCSS,
        applyTheme: applyTheme,
        applyStatusbar: applyStatusbar
    });


})();

(function () {
    "use strict";

    var utils = WinJS.Utilities;

    var applicationData = Windows.Storage.ApplicationData.current;
    var localSettings = applicationData.localSettings;

    function standardlizeJSON(str) {
        var i = 0;
        var newstr = '';
        while (i < str.length) {
            if ((str[i] == ',') || (str[i] == '[')) {
                switch (str[i + 1]) {
                    case ',':
                    case ']':
                        newstr += str[i] + 'null';
                        i++;
                        break;
                    case '"':
                        var tmp = str.substr(i + 2);
                        var j = tmp.indexOf('"');
                        while ((tmp[j - 1] == '\\') && (tmp[j-2] != '\\')) {
                            j = j + 1 + tmp.substr(j + 1).indexOf('"');
                        }
                        j = i + 2 + j;
                        newstr += str.substring(i, j + 1);
                        i = j + 1;

                        break;
                    default:
                        newstr += str[i];
                        i++;
                }
            }
            else {
                newstr += str[i];
                i++;
            }
        }

        return newstr;
    }

    function getPurchaseDateAsync() {
        return WinJS.Promise.as().then(function () {
            if (typeof localSettings.values["purchased"] != 'undefined') return;
            var currentApp = Windows.ApplicationModel.Store.CurrentApp;
            var licenseInformation = currentApp.licenseInformation;

            if (licenseInformation.productLicenses.lookup("premium").isActive) {
                localSettings.values["purchased"] = true;
                return;
            }
            else {
                if (licenseInformation.isTrial == true) {
                    localSettings.values["purchased"] = false;
                    return;
                }
                return currentApp.getAppReceiptAsync().then(function (txt) {
                    var xmlDoc = new Windows.Data.Xml.Dom.XmlDocument();
                    xmlDoc.loadXml(txt);
                    var purchaseDate = new Date(xmlDoc.getElementsByTagName("AppReceipt")[0].attributes.getNamedItem("PurchaseDate").value);
                    var pivotDate = new Date("2015-03-29T03:00:00Z");
                    if (purchaseDate <= pivotDate)
                        localSettings.values["purchased"] = true;
                });
            }
        }).then(null, function (err) { });
    }

    function isPremiun() {
        var currentApp = Windows.ApplicationModel.Store.CurrentApp;
        var licenseInformation = currentApp.licenseInformation;
        return ((licenseInformation.productLicenses.lookup("premium").isActive == true)
          || (licenseInformation.productLicenses.lookup("free.upgrade").isActive == true))
    }

    function popupNoInternet() {
        return Custom.Utils.popupMsg(WinJS.Resources.getString('no_internet').value, WinJS.Resources.getString("please_check_internet").value);
    };

    var msg;
    function popupMsg(title, content) {
        if (msg == null) {
            msg = new Windows.UI.Popups.MessageDialog(content, title);
            return msg.showAsync().then(function () { msg = null; });
        }
    };

    function showNotif(str) {
        if ((Custom.Device.isPhone) && (localSettings.values["statusbar"] != false)) {
            var statusBar = Windows.UI.ViewManagement.StatusBar.getForCurrentView();
            statusBar.progressIndicator.progressValue = null;
            statusBar.progressIndicator.text = str;
            return statusBar.progressIndicator.showAsync();
        }
        else {
            navProgress.hidden = false;
        }
    }

    function hideNotif() {
        if ((Custom.Device.isPhone) && (localSettings.values["statusbar"] != false)) {
            var statusBar = Windows.UI.ViewManagement.StatusBar.getForCurrentView();
            statusBar.progressIndicator.progressValue = 0;
            return statusBar.progressIndicator.hideAsync();
        }
        else {
            navProgress.hidden = true;
        }
    }

    function getDomain() {
        var useChineseServer = (typeof localSettings.values["chinese-server"] != 'undefined') ? localSettings.values["chinese-server"] : false;
        var useHTTPS = (typeof localSettings.values["https"] != 'undefined') ? localSettings.values["https"] : false;
        if (useChineseServer == true) return "http://translate.google.cn";
        if (useHTTPS) return "https://translate.google.com";
        return "http://translate.google.com";
    }

    WinJS.Namespace.define("Custom.Utils", {
        getPurchaseDateSync: getPurchaseDateAsync,
        isPremium: isPremiun,
        standardlizeJSON: standardlizeJSON,
        popupMsg: popupMsg,
        popupNoInternet: popupNoInternet,
        showNotif: showNotif,
        hideNotif: hideNotif,
        getDomain: getDomain
    });


})();
